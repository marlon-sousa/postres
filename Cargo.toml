# def 022 - cargo.toml and cargo.lock
#  In rust, we have a native project manager, much like npm or yarn exist for Node projects
#  Cargo is able to perform a wide range of activities for us, including managing dependencies and building and testing our project.
#  Cargo also accepts plugins, so that other members of the comunity can contribute functionalities.
#  The same way we have a pakage.lock or a yarn.lock, we also have a cargo.lock, which helps us to reproduce deterministic builds.
#  Cargo groups project artifacts in packages. This has nothing to do with java packages, which are namespaces anc help to regulate access control.
#  Understanding what is in this cargo.toml should be easy, so take a look at it.
# cargo is really cool: want to check if your project has mistakes? Make a cargo check.
# want to build your project? Make a cargo build
# wamt tto run your project? Make a cargo run
# want to generate documentation? Make a cargo doc
# wamt to test it? Make a cargo test
# by now, I hope you got what it means having cargo. Use like node, compile and deploy like go, have performance like C

[package]
name = "postres"
version = "0.1.0"
# editions define a range of featurs enabled for this compilation
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
anyhow = "1.0.58"
clap = { version = "4", features = ["derive"] }
derive_builder = {git = "https://github.com/marlon-sousa/rust-derive-builder.git", branch = "feature/post-builder-operation"}
fancy-regex = "0.10.0"
lazy_static = "1.4.0"
regex = "1.6.0"
serde = { version = "1.0.145", features = ["derive"] }
serde_json = "1.0.85"
string-builder = "0.2.0"
strum = { version = "0.24.1", features = ["strum_macros", "derive"] }
thiserror = "1.0.31"
tracing = "0.1.35"
tracing-appender = "0.2.2"
tracing-log = "0.1.3"
tracing-subscriber = { version = "0.3.14", features = ["env-filter"] }
url = "2.2.2"

[dev-dependencies]
indoc = "1.0"
